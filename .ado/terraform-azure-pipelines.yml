variables:
  serviceConnectionName: 'sc-vec-eus-terraform-ado-001'
  terraformStateResourceGroup: 'rg-vec-eus-administration-001'
  terraformStateStorageAccount: 'stveceusterraformstat001'
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    branchType: main
  ${{ if ne(variables['Build.SourceBranchName'], 'main') }}: 
    branchType: pull

name: $(Build.DefinitionName)_$(branchType)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - .deployment/*

stages:

##########################
### DEPLOY
##########################

- stage: Deploy
  displayName: 'Deploy'

  jobs:
  - deployment: Terraform
    displayName: 'Terraform'
    environment: dev
    timeoutInMinutes: 10

    pool:
      vmImage: ubuntu-latest

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            persistCredentials: true
            displayName: 'Checkout repository'
  
          - task: TerraformInstaller@1
            displayName: 'Terraform > Install Latest'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform > Init'
            inputs:
              command: 'init'
              provider: 'azurerm'
              ensureBackend: true
              workingDirectory: '$(System.DefaultWorkingDirectory)/.deployment/iac/terraform'
              backendServiceArm: '$(serviceConnectionName)'
              backendAzureRmResourceGroupName: '$(terraformStateResourceGroup)'
              backendAzureRmStorageAccountName: '$(terraformStateStorageAccount)'
              backendAzureRmContainerName: 'terraform-ado'
              backendAzureRmKey: 'ado/terraform.tfstate'

          - task: TerraformTaskV4@4
            displayName: 'Terraform > Validate'
            inputs:
              command: 'validate'
              provider: 'azurerm'
              workingDirectory: '$(System.DefaultWorkingDirectory)/.deployment/iac/terraform'

          - task: TerraformTaskV4@4
            displayName: 'Terraform > Plan'
            inputs:
              command: 'plan'
              provider: 'azurerm'
              workingDirectory: '$(System.DefaultWorkingDirectory)/.deployment/iac/terraform'
              environmentServiceNameAzureRM: '$(serviceConnectionName)'
              commandOptions: '-var "PAT=$(terraform_pat)"'

          - task: TerraformTaskV4@4
            displayName: 'Terraform > Apply'
            condition: and(not(or(failed(), canceled())), eq(variables['branchType'], 'main'))
            inputs:
              command: 'apply'
              provider: 'azurerm'
              workingDirectory: '$(System.DefaultWorkingDirectory)/.deployment/iac/terraform'
              environmentServiceNameAzureRM: '$(serviceConnectionName)'
              commandOptions: '-var "PAT=$(terraform_pat)" -auto-approve'

          - script: |
              tag="prod-release-$(date +%Y%m%dT%H%M%S%z)"
              git tag $tag
              git push origin $tag HEAD:refs/heads/main
            displayName: 'Git Tag'
            condition: and(not(or(failed(), canceled())), eq(variables['branchType'], 'main'))
            workingDirectory: $(Build.SourcesDirectory)